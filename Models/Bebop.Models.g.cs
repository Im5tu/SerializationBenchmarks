//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//       bebopc version:
//           3.0.14
//
//
//       bebopc source:
//           https://github.com/betwixt-labs/bebop
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// This source code was auto-generated by bebopc, Version=3.0.14.
//
namespace SerializationBenchmarks.Models.Bebop {

  [global::System.CodeDom.Compiler.GeneratedCode("bebopc", "3.0.14")]
  [global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Enum)]
  public enum Gender : uint {
    Male = 0,
    Female = 1
  }

  [global::System.CodeDom.Compiler.GeneratedCode("bebopc", "3.0.14")]
  [global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
  public partial class Order : global::Bebop.Runtime.BaseBebopRecord, global::Bebop.Runtime.IDecodable<Order>, global::System.IEquatable<Order> {
    #nullable enable
    /// <inheritdoc />
    public sealed override int MaxByteCount => GetMaxByteCount();
    /// <inheritdoc />
    public sealed override int ByteCount => GetByteCount();
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public int? OrderId { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? Item { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public int? Quantity { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public int? LotNumber { get; set; }

    /// <summary>
    /// </summary>
    public Order() : base() { }
    /// <summary>
    /// </summary>
    /// <param name="orderId">
    /// </param>
    /// <param name="item">
    /// </param>
    /// <param name="quantity">
    /// </param>
    /// <param name="lotNumber">
    /// </param>
    public Order([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? orderId, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? item, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? quantity, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? lotNumber) => (OrderId, Item, Quantity, LotNumber) = (orderId, item, quantity, lotNumber);
    public Order([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] Order? original) => (OrderId, Item, Quantity, LotNumber) = (original?.OrderId, original?.Item, original?.Quantity, original?.LotNumber);
    public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? orderId, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? item, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? quantity, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? lotNumber) => (orderId, item, quantity, lotNumber) = (OrderId, Item, Quantity, LotNumber);

    /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    private protected int GetMaxByteCount() {
      int byteCount = 0;
      byteCount += 5;
      if (OrderId is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      if (Item is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Item.Length);
      }
      if (Quantity is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      if (LotNumber is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      return byteCount;
    }


    /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    private protected int GetByteCount() {
      int byteCount = 0;
      byteCount += 5;
      if (OrderId is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      if (Item is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Item);
      }
      if (Quantity is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      if (LotNumber is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      return byteCount;
    }

    #nullable disable

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override byte[] Encode() {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static byte[] Encode(global::SerializationBenchmarks.Models.Bebop.Order record) {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override byte[] Encode(int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static byte[] Encode(global::SerializationBenchmarks.Models.Bebop.Order record, int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(global::SerializationBenchmarks.Models.Bebop.Order record) {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(global::SerializationBenchmarks.Models.Bebop.Order record, int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override int EncodeIntoBuffer(byte[] outBuffer) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(outBuffer);
      return __EncodeInto(this, ref writer);
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static int EncodeIntoBuffer(global::SerializationBenchmarks.Models.Bebop.Order record, byte[] outBuffer) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(outBuffer);
      return __EncodeInto(record, ref writer);
    }

    #region Static Decode Methods
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.Order Decode(byte[] record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.Order Decode(global::System.ReadOnlySpan<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.Order Decode(global::System.ReadOnlyMemory<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.Order Decode(global::System.ArraySegment<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.Order Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    #endregion
    #region Internal Use
    /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static int __EncodeInto(global::SerializationBenchmarks.Models.Bebop.Order record, ref global::Bebop.Runtime.BebopWriter writer) {
      var before = writer.Length;
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.OrderId is not null) {
        writer.WriteByte(1);
        writer.WriteInt32(record.OrderId.Value);
      }

      if (record.Item is not null) {
        writer.WriteByte(2);
        writer.WriteString(record.Item);
      }

      if (record.Quantity is not null) {
        writer.WriteByte(3);
        writer.WriteInt32(record.Quantity.Value);
      }

      if (record.LotNumber is not null) {
        writer.WriteByte(4);
        writer.WriteInt32(record.LotNumber.Value);
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
      var after = writer.Length;
      return after - before;
    }


    /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static global::SerializationBenchmarks.Models.Bebop.Order __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

      var record = new global::SerializationBenchmarks.Models.Bebop.Order();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.OrderId = reader.ReadInt32();
            break;
          case 2:
            record.Item = reader.ReadString();
            break;
          case 3:
            record.Quantity = reader.ReadInt32();
            break;
          case 4:
            record.LotNumber = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }

    #endregion
    #region Equality
    public bool Equals(global::SerializationBenchmarks.Models.Bebop.Order other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return OrderId == other.OrderId && Item == other.Item && Quantity == other.Quantity && LotNumber == other.LotNumber;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not global::SerializationBenchmarks.Models.Bebop.Order baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (OrderId is not null) hash ^= OrderId.Value.GetHashCode();
      if (Item is not null) hash ^= Item.GetHashCode();
      if (Quantity is not null) hash ^= Quantity.Value.GetHashCode();
      if (LotNumber is not null) hash ^= LotNumber.Value.GetHashCode();
      return hash;
    }

    public static bool operator ==(global::SerializationBenchmarks.Models.Bebop.Order left, global::SerializationBenchmarks.Models.Bebop.Order right) => Equals(left, right);
    public static bool operator !=(global::SerializationBenchmarks.Models.Bebop.Order left, global::SerializationBenchmarks.Models.Bebop.Order  right) => !Equals(left, right);
    #endregion

  }

  [global::System.CodeDom.Compiler.GeneratedCode("bebopc", "3.0.14")]
  [global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
  public partial class User : global::Bebop.Runtime.BaseBebopRecord, global::Bebop.Runtime.IDecodable<User>, global::System.IEquatable<User> {
    #nullable enable
    /// <inheritdoc />
    public sealed override int MaxByteCount => GetMaxByteCount();
    /// <inheritdoc />
    public sealed override int ByteCount => GetByteCount();
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public int? ID { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? FirstName { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? LastName { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? FullName { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? UserName { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? Email { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? SomethingUnique { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public global::System.Guid? SomeGuid { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? Avatar { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public global::System.Guid? CartId { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public string? Ssn { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public global::SerializationBenchmarks.Models.Bebop.Gender? Gender { get; set; }
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public global::SerializationBenchmarks.Models.Bebop.Order[]? Orders { get; set; }

    /// <summary>
    /// </summary>
    public User() : base() { }
    /// <summary>
    /// </summary>
    /// <param name="Id">
    /// </param>
    /// <param name="firstName">
    /// </param>
    /// <param name="lastName">
    /// </param>
    /// <param name="fullName">
    /// </param>
    /// <param name="userName">
    /// </param>
    /// <param name="email">
    /// </param>
    /// <param name="somethingUnique">
    /// </param>
    /// <param name="someGuid">
    /// </param>
    /// <param name="avatar">
    /// </param>
    /// <param name="cartId">
    /// </param>
    /// <param name="ssn">
    /// </param>
    /// <param name="gender">
    /// </param>
    /// <param name="orders">
    /// </param>
    public User([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? Id, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? firstName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? lastName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? fullName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? userName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? email, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? somethingUnique, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] global::System.Guid? someGuid, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? avatar, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] global::System.Guid? cartId, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? ssn, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] global::SerializationBenchmarks.Models.Bebop.Gender? gender, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] global::SerializationBenchmarks.Models.Bebop.Order[]? orders) => (ID, FirstName, LastName, FullName, UserName, Email, SomethingUnique, SomeGuid, Avatar, CartId, Ssn, Gender, Orders) = (Id, firstName, lastName, fullName, userName, email, somethingUnique, someGuid, avatar, cartId, ssn, gender, orders);
    public User([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] User? original) => (ID, FirstName, LastName, FullName, UserName, Email, SomethingUnique, SomeGuid, Avatar, CartId, Ssn, Gender, Orders) = (original?.ID, original?.FirstName, original?.LastName, original?.FullName, original?.UserName, original?.Email, original?.SomethingUnique, original?.SomeGuid, original?.Avatar, original?.CartId, original?.Ssn, original?.Gender, original?.Orders);
    public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? Id, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? firstName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? lastName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? fullName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? userName, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? email, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? somethingUnique, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out global::System.Guid? someGuid, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? avatar, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out global::System.Guid? cartId, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? ssn, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out global::SerializationBenchmarks.Models.Bebop.Gender? gender, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out global::SerializationBenchmarks.Models.Bebop.Order[]? orders) => (Id, firstName, lastName, fullName, userName, email, somethingUnique, someGuid, avatar, cartId, ssn, gender, orders) = (ID, FirstName, LastName, FullName, UserName, Email, SomethingUnique, SomeGuid, Avatar, CartId, Ssn, Gender, Orders);

    /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    private protected int GetMaxByteCount() {
      int byteCount = 0;
      byteCount += 5;
      if (ID is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      if (FirstName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(FirstName.Length);
      }
      if (LastName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(LastName.Length);
      }
      if (FullName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(FullName.Length);
      }
      if (UserName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(UserName.Length);
      }
      if (Email is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Email.Length);
      }
      if (SomethingUnique is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(SomethingUnique.Length);
      }
      if (SomeGuid is not null) {
        byteCount += sizeof(byte);
        byteCount += 16;
      }
      if (Avatar is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Avatar.Length);
      }
      if (CartId is not null) {
        byteCount += sizeof(byte);
        byteCount += 16;
      }
      if (Ssn is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Ssn.Length);
      }
      if (Gender is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint);
      }
      if (Orders is not null) {
        byteCount += sizeof(byte);
        {
          var length0 = unchecked((uint)Orders.Length);
          byteCount += sizeof(uint);
          for (var i0 = 0; i0 < length0; i0++) {
            byteCount += Orders[i0].MaxByteCount;
          }
        }
      }
      return byteCount;
    }


    /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    private protected int GetByteCount() {
      int byteCount = 0;
      byteCount += 5;
      if (ID is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(int);
      }
      if (FirstName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(FirstName);
      }
      if (LastName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(LastName);
      }
      if (FullName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(FullName);
      }
      if (UserName is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(UserName);
      }
      if (Email is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Email);
      }
      if (SomethingUnique is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(SomethingUnique);
      }
      if (SomeGuid is not null) {
        byteCount += sizeof(byte);
        byteCount += 16;
      }
      if (Avatar is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Avatar);
      }
      if (CartId is not null) {
        byteCount += sizeof(byte);
        byteCount += 16;
      }
      if (Ssn is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Ssn);
      }
      if (Gender is not null) {
        byteCount += sizeof(byte);
        byteCount += sizeof(uint);
      }
      if (Orders is not null) {
        byteCount += sizeof(byte);
        {
          var length0 = unchecked((uint)Orders.Length);
          byteCount += sizeof(uint);
          for (var i0 = 0; i0 < length0; i0++) {
            byteCount += Orders[i0].ByteCount;
          }
        }
      }
      return byteCount;
    }

    #nullable disable

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override byte[] Encode() {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static byte[] Encode(global::SerializationBenchmarks.Models.Bebop.User record) {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override byte[] Encode(int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static byte[] Encode(global::SerializationBenchmarks.Models.Bebop.User record, int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(global::SerializationBenchmarks.Models.Bebop.User record) {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(global::SerializationBenchmarks.Models.Bebop.User record, int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override int EncodeIntoBuffer(byte[] outBuffer) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(outBuffer);
      return __EncodeInto(this, ref writer);
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static int EncodeIntoBuffer(global::SerializationBenchmarks.Models.Bebop.User record, byte[] outBuffer) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(outBuffer);
      return __EncodeInto(record, ref writer);
    }

    #region Static Decode Methods
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.User Decode(byte[] record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.User Decode(global::System.ReadOnlySpan<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.User Decode(global::System.ReadOnlyMemory<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.User Decode(global::System.ArraySegment<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.User Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    #endregion
    #region Internal Use
    /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static int __EncodeInto(global::SerializationBenchmarks.Models.Bebop.User record, ref global::Bebop.Runtime.BebopWriter writer) {
      var before = writer.Length;
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.ID is not null) {
        writer.WriteByte(1);
        writer.WriteInt32(record.ID.Value);
      }

      if (record.FirstName is not null) {
        writer.WriteByte(2);
        writer.WriteString(record.FirstName);
      }

      if (record.LastName is not null) {
        writer.WriteByte(3);
        writer.WriteString(record.LastName);
      }

      if (record.FullName is not null) {
        writer.WriteByte(4);
        writer.WriteString(record.FullName);
      }

      if (record.UserName is not null) {
        writer.WriteByte(5);
        writer.WriteString(record.UserName);
      }

      if (record.Email is not null) {
        writer.WriteByte(6);
        writer.WriteString(record.Email);
      }

      if (record.SomethingUnique is not null) {
        writer.WriteByte(7);
        writer.WriteString(record.SomethingUnique);
      }

      if (record.SomeGuid is not null) {
        writer.WriteByte(8);
        writer.WriteGuid(record.SomeGuid.Value);
      }

      if (record.Avatar is not null) {
        writer.WriteByte(9);
        writer.WriteString(record.Avatar);
      }

      if (record.CartId is not null) {
        writer.WriteByte(10);
        writer.WriteGuid(record.CartId.Value);
      }

      if (record.Ssn is not null) {
        writer.WriteByte(11);
        writer.WriteString(record.Ssn);
      }

      if (record.Gender is not null) {
        writer.WriteByte(12);
        writer.WriteUInt32(System.Runtime.CompilerServices.Unsafe.As<global::SerializationBenchmarks.Models.Bebop.Gender, uint>(ref System.Runtime.CompilerServices.Unsafe.AsRef(record.Gender.Value)));
      }

      if (record.Orders is not null) {
        writer.WriteByte(13);
        {
          var length0 = unchecked((uint)record.Orders.Length);
          writer.WriteUInt32(length0);
          for (var i0 = 0; i0 < length0; i0++) {
            global::SerializationBenchmarks.Models.Bebop.Order.__EncodeInto(record.Orders[i0], ref writer);
          }
        }
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
      var after = writer.Length;
      return after - before;
    }


    /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static global::SerializationBenchmarks.Models.Bebop.User __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

      var record = new global::SerializationBenchmarks.Models.Bebop.User();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.ID = reader.ReadInt32();
            break;
          case 2:
            record.FirstName = reader.ReadString();
            break;
          case 3:
            record.LastName = reader.ReadString();
            break;
          case 4:
            record.FullName = reader.ReadString();
            break;
          case 5:
            record.UserName = reader.ReadString();
            break;
          case 6:
            record.Email = reader.ReadString();
            break;
          case 7:
            record.SomethingUnique = reader.ReadString();
            break;
          case 8:
            record.SomeGuid = reader.ReadGuid();
            break;
          case 9:
            record.Avatar = reader.ReadString();
            break;
          case 10:
            record.CartId = reader.ReadGuid();
            break;
          case 11:
            record.Ssn = reader.ReadString();
            break;
          case 12:
            record.Gender = System.Runtime.CompilerServices.Unsafe.As<uint, global::SerializationBenchmarks.Models.Bebop.Gender>(ref System.Runtime.CompilerServices.Unsafe.AsRef(reader.ReadUInt32()));
            break;
          case 13:
            {
              var length0 = unchecked((int)reader.ReadUInt32());
              record.Orders = new global::SerializationBenchmarks.Models.Bebop.Order[length0];
              for (var i0 = 0; i0 < length0; i0++) {
                global::SerializationBenchmarks.Models.Bebop.Order x0;
                x0 = global::SerializationBenchmarks.Models.Bebop.Order.__DecodeFrom(ref reader);
                record.Orders[i0] = x0;
              }
            }
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }

    #endregion
    #region Equality
    public bool Equals(global::SerializationBenchmarks.Models.Bebop.User other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return ID == other.ID && FirstName == other.FirstName && LastName == other.LastName && FullName == other.FullName && UserName == other.UserName && Email == other.Email && SomethingUnique == other.SomethingUnique && SomeGuid == other.SomeGuid && Avatar == other.Avatar && CartId == other.CartId && Ssn == other.Ssn && Gender == other.Gender && (Orders is null ? other.Orders is null : other.Orders is not null && global::System.Linq.Enumerable.SequenceEqual(Orders, other.Orders));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not global::SerializationBenchmarks.Models.Bebop.User baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID is not null) hash ^= ID.Value.GetHashCode();
      if (FirstName is not null) hash ^= FirstName.GetHashCode();
      if (LastName is not null) hash ^= LastName.GetHashCode();
      if (FullName is not null) hash ^= FullName.GetHashCode();
      if (UserName is not null) hash ^= UserName.GetHashCode();
      if (Email is not null) hash ^= Email.GetHashCode();
      if (SomethingUnique is not null) hash ^= SomethingUnique.GetHashCode();
      if (SomeGuid is not null) hash ^= SomeGuid.Value.GetHashCode();
      if (Avatar is not null) hash ^= Avatar.GetHashCode();
      if (CartId is not null) hash ^= CartId.Value.GetHashCode();
      if (Ssn is not null) hash ^= Ssn.GetHashCode();
      if (Gender is not null) hash ^= Gender.Value.GetHashCode();
      if (Orders is not null) hash ^= Orders.GetHashCode();
      return hash;
    }

    public static bool operator ==(global::SerializationBenchmarks.Models.Bebop.User left, global::SerializationBenchmarks.Models.Bebop.User right) => Equals(left, right);
    public static bool operator !=(global::SerializationBenchmarks.Models.Bebop.User left, global::SerializationBenchmarks.Models.Bebop.User  right) => !Equals(left, right);
    #endregion

  }

  [global::System.CodeDom.Compiler.GeneratedCode("bebopc", "3.0.14")]
  [global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
  public partial class UserWrapper : global::Bebop.Runtime.BaseBebopRecord, global::Bebop.Runtime.IDecodable<UserWrapper>, global::System.IEquatable<UserWrapper> {
    #nullable enable
    /// <inheritdoc />
    public sealed override int MaxByteCount => GetMaxByteCount();
    /// <inheritdoc />
    public sealed override int ByteCount => GetByteCount();
    [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
    public global::SerializationBenchmarks.Models.Bebop.User[]? Users { get; set; }

    /// <summary>
    /// </summary>
    public UserWrapper() : base() { }
    /// <summary>
    /// </summary>
    /// <param name="users">
    /// </param>
    public UserWrapper([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] global::SerializationBenchmarks.Models.Bebop.User[]? users) => (Users) = (users);
    public UserWrapper([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] UserWrapper? original) => (Users) = (original?.Users);
    public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out global::SerializationBenchmarks.Models.Bebop.User[]? users) => (users) = (Users);

    /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    private protected int GetMaxByteCount() {
      int byteCount = 0;
      byteCount += 5;
      if (Users is not null) {
        byteCount += sizeof(byte);
        {
          var length0 = unchecked((uint)Users.Length);
          byteCount += sizeof(uint);
          for (var i0 = 0; i0 < length0; i0++) {
            byteCount += Users[i0].MaxByteCount;
          }
        }
      }
      return byteCount;
    }


    /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    private protected int GetByteCount() {
      int byteCount = 0;
      byteCount += 5;
      if (Users is not null) {
        byteCount += sizeof(byte);
        {
          var length0 = unchecked((uint)Users.Length);
          byteCount += sizeof(uint);
          for (var i0 = 0; i0 < length0; i0++) {
            byteCount += Users[i0].ByteCount;
          }
        }
      }
      return byteCount;
    }

    #nullable disable

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override byte[] Encode() {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static byte[] Encode(global::SerializationBenchmarks.Models.Bebop.UserWrapper record) {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override byte[] Encode(int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static byte[] Encode(global::SerializationBenchmarks.Models.Bebop.UserWrapper record, int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(global::SerializationBenchmarks.Models.Bebop.UserWrapper record) {
      var writer = global::Bebop.Runtime.BebopWriter.Create();
      __EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(global::SerializationBenchmarks.Models.Bebop.UserWrapper record, int initialCapacity) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(initialCapacity);
      __EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public sealed override int EncodeIntoBuffer(byte[] outBuffer) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(outBuffer);
      return __EncodeInto(this, ref writer);
    }
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static int EncodeIntoBuffer(global::SerializationBenchmarks.Models.Bebop.UserWrapper record, byte[] outBuffer) {
      var writer = global::Bebop.Runtime.BebopWriter.Create(outBuffer);
      return __EncodeInto(record, ref writer);
    }

    #region Static Decode Methods
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.UserWrapper Decode(byte[] record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.UserWrapper Decode(global::System.ReadOnlySpan<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.UserWrapper Decode(global::System.ReadOnlyMemory<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.UserWrapper Decode(global::System.ArraySegment<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    public static global::SerializationBenchmarks.Models.Bebop.UserWrapper Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
      var reader = global::Bebop.Runtime.BebopReader.From(record);
      return __DecodeFrom(ref reader);
    }

    #endregion
    #region Internal Use
    /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static int __EncodeInto(global::SerializationBenchmarks.Models.Bebop.UserWrapper record, ref global::Bebop.Runtime.BebopWriter writer) {
      var before = writer.Length;
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.Users is not null) {
        writer.WriteByte(1);
        {
          var length0 = unchecked((uint)record.Users.Length);
          writer.WriteUInt32(length0);
          for (var i0 = 0; i0 < length0; i0++) {
            global::SerializationBenchmarks.Models.Bebop.User.__EncodeInto(record.Users[i0], ref writer);
          }
        }
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
      var after = writer.Length;
      return after - before;
    }


    /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
    [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static global::SerializationBenchmarks.Models.Bebop.UserWrapper __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

      var record = new global::SerializationBenchmarks.Models.Bebop.UserWrapper();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            {
              var length0 = unchecked((int)reader.ReadUInt32());
              record.Users = new global::SerializationBenchmarks.Models.Bebop.User[length0];
              for (var i0 = 0; i0 < length0; i0++) {
                global::SerializationBenchmarks.Models.Bebop.User x0;
                x0 = global::SerializationBenchmarks.Models.Bebop.User.__DecodeFrom(ref reader);
                record.Users[i0] = x0;
              }
            }
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }

    #endregion
    #region Equality
    public bool Equals(global::SerializationBenchmarks.Models.Bebop.UserWrapper other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (Users is null ? other.Users is null : other.Users is not null && global::System.Linq.Enumerable.SequenceEqual(Users, other.Users));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not global::SerializationBenchmarks.Models.Bebop.UserWrapper baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Users is not null) hash ^= Users.GetHashCode();
      return hash;
    }

    public static bool operator ==(global::SerializationBenchmarks.Models.Bebop.UserWrapper left, global::SerializationBenchmarks.Models.Bebop.UserWrapper right) => Equals(left, right);
    public static bool operator !=(global::SerializationBenchmarks.Models.Bebop.UserWrapper left, global::SerializationBenchmarks.Models.Bebop.UserWrapper  right) => !Equals(left, right);
    #endregion

  }

}
